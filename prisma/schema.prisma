generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  role     String?
  userRole String[]

  directusId String?

  balance      Float         @default(0)
  passId       String?       @db.Text
  qrCodes      QRCode[]
  transactions Transaction[]

  // New profile fields
  displayName String?
  bio         String? @db.Text
  phoneNumber String?
  location    String?

  activityLogs ActivityLog[]

  @@unique([email])
  @@unique([directusId])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model QRCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  adminId   String? // Add this field

  @@map("qr_code")
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  type      String // "ADD" or "REMOVE"
  adminId   String
  createdAt DateTime @default(now())

  @@map("transaction")
}

model Facility {
  id          String          @id @default(cuid())
  name        String
  address     String
  longitude   Float           @default(0)
  latitude    Float           @default(0)
  description String?         @db.Text
  phone       String?
  openTime    String
  closeTime   String
  images      FacilityImage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("facility")
}

model FacilityImage {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  isPrimary  Boolean  @default(false)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("facility_image")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  details   String   @db.Text
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("activity_log")
}

model Settings {
  id                Int      @id @default(1)
  appIconUrl        String
  backgroundImageUrl String
}

model Event {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  date        DateTime
  categoryId  String
  category    EventCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("event")
}

model EventCategory {
  id        String   @id @default(cuid())
  name      String
  events    Event[]  @relation("EventCategoryToEvent")

  @@map("event_category")
}
